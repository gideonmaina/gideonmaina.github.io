---
import Layout from "@layouts/Layout.astro";
import strapiAPI from "@lib/strapi.js";

export const prerender = false;

const title = "Gallery";
const description =
  "Explore my photo gallery featuring events, seminars, conferences, and memorable moments from my professional and personal journey.";

let galleries = [];
let allCategories = [];

try {
  // Fetch all galleries with corrected API
  const galleriesResponse = await strapiAPI.getGalleries({
    sort: "date:desc",
    pagination: { pageSize: 100 },
  });
  galleries = galleriesResponse.galleries || [];
  console.log("[index.astro] Fetched galleries:", galleries);

  // Extract unique categories for filtering
  allCategories = [
    ...new Set(galleries.map((g: { category: any }) => g.category))
  ].filter(Boolean).sort();
  console.log("[index.astro] Extracted categories:", allCategories);
} catch (error) {
  console.error("[index.astro] Error fetching galleries:", error);
}
---

<Layout title={title} description={description}>

  <!-- Hero Section -->
  <section class="relative overflow-hidden bg-gradient-to-br from-gray-900 via-slate-900 to-black py-20 lg:py-32">
    <!-- Background Pattern -->
    <div class="absolute inset-0 bg-gradient-to-br from-indigo-900/20 via-purple-900/20 to-gray-900/20">
      <div
        class="absolute inset-0"
        style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.05) 1px, transparent 0); background-size: 20px 20px;"
      ></div>
    </div>

    <!-- Floating Elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute -top-20 -left-20 w-96 h-96 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute top-1/3 -right-20 w-80 h-80 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-0 left-1/3 w-64 h-64 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <!-- Hero Content -->
      <div data-aos="fade-up" data-aos-duration="800">
        <p class="text-xl lg:text-2xl text-slate-300 max-w-3xl mx-auto mb-8 leading-relaxed">
          A visual journey through my professional experiences, memorable events, and personal milestones
        </p>

        <!-- Stats -->
        <div class="flex justify-center items-center space-x-8 mb-12">
          <div class="text-center" data-aos="fade-up" data-aos-delay="200">
            <div class="text-3xl font-bold text-cyan-400">{galleries.length}</div>
            <div class="text-slate-400 text-sm">Gallery Items</div>
          </div>
          <div class="w-px h-12 bg-slate-600"></div>
          <div class="text-center" data-aos="fade-up" data-aos-delay="400">
            <div class="text-3xl font-bold text-purple-400">{allCategories.length}</div>
            <div class="text-slate-400 text-sm">Categories</div>
          </div>
        </div>

        <!-- Category Filters -->
           <div class="flex flex-wrap justify-center gap-3" id="category-filters" data-aos="fade-up">
        <button
          class="category-filter active px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg hover:shadow-purple-500/25 transform hover:scale-105"
          data-category="all"
        >
          All ({galleries.length})
        </button>
        {allCategories.map((category) => (
          <button
            class="category-filter px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 bg-slate-800/80 text-slate-300 hover:bg-gradient-to-r hover:from-slate-700 hover:to-slate-600 hover:text-white border border-slate-700/50 hover:border-purple-500/50 backdrop-blur-sm transform hover:scale-105"
            data-category={category}
          >
            {category.charAt(0).toUpperCase() + category.slice(1)} ({galleries.filter(g => g.category === category).length})
          </button>
        ))}
      </div>
      </div>
    </div>
  </section>

  <!-- Gallery Grid Section -->
  <section class="bg-gradient-to-br from-gray-900 via-slate-900 to-black py-20 relative overflow-hidden">
    <!-- Background Pattern -->
    <div class="absolute inset-0 bg-gradient-to-br from-indigo-900/20 via-purple-900/20 to-gray-900/20">
      <div
        class="absolute inset-0"
        style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.05) 1px, transparent 0); background-size: 20px 20px;"
      ></div>
    </div>
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Flexbox Grid with Extra Large Images in Rows -->
      <div id="gallery-grid" class="flex-row-grid same-size-images">
        {galleries.map((gallery, index) => (
          <div
            class={`gallery-item group flex-1 min-w-[340px] max-w-[400px] mx-4 mb-12 relative overflow-hidden rounded-3xl shadow-2xl bg-gradient-to-br from-slate-900/80 to-gray-900/80 border border-slate-800/40 transition-all duration-500 hover:scale-[1.04] hover:shadow-2xl hover:shadow-purple-500/40`}
            data-category={gallery.category}
            data-aos="fade-up"
            data-aos-delay={index * 60}
            style="display: flex; flex-direction: column;"
          >
            <a href={`/gallery/${gallery.slug}`} class="block relative">
              <div class="relative overflow-hidden">
                {gallery.media ? (
                  <img
                    src={gallery.media}
                    alt={gallery.altText || gallery.title}
                    class="w-full h-[400px] object-cover rounded-2xl shadow-2xl transition-transform duration-700 group-hover:scale-105 group-hover:shadow-purple-500/30"
                    loading="lazy"
                    style="width: 100%; min-width: 340px; max-width: 400px; margin: 0 auto; display: block;"
                  />
                ) : (
                  <div class="w-full h-[400px] bg-gradient-to-br from-slate-800 to-slate-900 flex items-center justify-center">
                    <svg class="w-24 h-24 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                )}
              </div>
              {/* Bottom Overlay for Text/Meta Info - hidden by default, show on hover */}
              <div class="gallery-bottom-overlay absolute left-0 right-0 bottom-0 px-8 py-7 bg-gradient-to-t from-black/90 via-black/60 to-transparent backdrop-blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="flex flex-col gap-2">
                  <span class="inline-flex items-center px-4 py-2 mb-2 rounded-full text-xs font-semibold bg-gradient-to-r from-purple-500/80 to-pink-500/80 text-white backdrop-blur-sm border border-white/10 shadow-lg self-start">
                    {gallery.category.charAt(0).toUpperCase() + gallery.category.slice(1)}
                  </span>
                    <h3 class="text-xl font-bold text-white mb-1 leading-tight drop-shadow-lg">
                    {gallery.title}
                    </h3>
                  <div class="flex flex-wrap items-center gap-6 mb-1">
                    {gallery.date && (
                      <div class="flex items-center text-white/90 text-base">
                        <svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <span class="font-medium">
                          {new Date(gallery.date).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          })}
                        </span>
                      </div>
                    )}
                    {gallery.location && (
                      <div class="flex items-center text-white/90 text-base">
                        <svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        <span class="font-medium truncate">
                          {gallery.location}
                        </span>
                      </div>
                    )}
                  </div>
                  <div class="transform translate-y-8 opacity-0 group-hover:translate-y-0 group-hover:opacity-100 transition-all duration-500 delay-75">
                    <div class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-full font-medium shadow-lg backdrop-blur-sm border border-white/20 hover:from-purple-700 hover:to-pink-700 transition-all duration-300">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                      View more
                    </div>
                  </div>
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>

      <!-- Empty State -->
      {galleries.length === 0 && (
        <div class="text-center py-20" data-aos="fade-up">
          <div class="w-24 h-24 mx-auto mb-6 rounded-full bg-slate-800/50 flex items-center justify-center backdrop-blur-sm">
            <svg class="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-white mb-2">No galleries found</h3>
          <p class="text-slate-400 max-w-md mx-auto">
            No gallery items are available at the moment. Check back later for new content.
          </p>
        </div>
      )}
    </div>
  </section>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Custom scrollbar for filters */
  #category-filters::-webkit-scrollbar {
    height: 4px;
  }

  #category-filters::-webkit-scrollbar-track {
    background: rgba(30, 41, 59, 0.5);
    border-radius: 2px;
  }

  #category-filters::-webkit-scrollbar-thumb {
    background: linear-gradient(to right, #9333ea, #ec4899);
    border-radius: 2px;
  }

  /* Flexbox Row Grid Styles - Same Size Images */
  .flex-row-grid.same-size-images {
    display: flex;
    flex-wrap: wrap;
    gap: 2.5rem;
    justify-content: center;
    align-items: flex-start;
  }
  .flex-row-grid.same-size-images .gallery-item {
    flex: 1 1 340px;
    max-width: 400px;
    min-width: 340px;
    margin-bottom: 3rem;
    box-sizing: border-box;
    transition: box-shadow 0.3s, transform 0.3s;
    display: flex;
    flex-direction: column;
  }
  @media (max-width: 1024px) {
    .flex-row-grid.same-size-images {
      gap: 1.5rem;
    }
    .flex-row-grid.same-size-images .gallery-item {
      max-width: 100%;
      min-width: 220px;
    }
    .flex-row-grid.same-size-images img {
      height: 220px !important;
    }
  }
  .gallery-bottom-overlay {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    border-bottom-left-radius: 1.5rem;
    border-bottom-right-radius: 1.5rem;
    box-shadow: 0 8px 32px 0 rgba(99,102,241,0.12);
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s;
  }
  .group:hover .gallery-bottom-overlay {
    opacity: 1;
  }
  .gallery-bottom-overlay * {
    pointer-events: auto;
  }
</style>

<script is:inline>
  // Category filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.category-filter');
    const galleryItems = document.querySelectorAll('.gallery-item');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');

        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        // Update button styles
        filterButtons.forEach(btn => {
          if (btn.classList.contains('active')) {
            btn.className = 'category-filter active px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg hover:shadow-purple-500/25 transform hover:scale-105';
          } else {
            btn.className = 'category-filter px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 bg-slate-800/80 text-slate-300 hover:bg-gradient-to-r hover:from-slate-700 hover:to-slate-600 hover:text-white border border-slate-700/50 hover:border-purple-500/50 backdrop-blur-sm transform hover:scale-105';
          }
        });

        // Filter gallery items
        galleryItems.forEach((item, index) => {
          const itemCategory = item.getAttribute('data-category');
          const shouldShow = category === 'all' || itemCategory === category;

          if (shouldShow) {
            item.style.display = 'block';
            item.style.animation = `fadeInUp 0.6s ease forwards ${index * 0.1}s`;
          } else {
            item.style.display = 'none';
          }
        });
      });
    });

    // Initialize AOS animations if available
    try {
      if (window.AOS) {
        window.AOS.init({
          duration: 800,
          easing: 'ease-in-out',
          once: true,
          offset: 50,
        });
      }
    } catch (e) {
      // AOS not available
    }

    // Add smooth scroll to category filters
    const filtersContainer = document.getElementById('category-filters');
    if (filtersContainer) {
      filtersContainer.addEventListener('wheel', (e) => {
        e.preventDefault();
        filtersContainer.scrollLeft += e.deltaY;
      });
    }
  });

  // Add CSS animation keyframes
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  `;
  document.head.appendChild(style);
</script>
